package gui;

import common.*;
import java.util.*;
import java.util.regex.*;
import java.io.*;
import javax.swing.*;

/*
 * MainWindow.java
 *
 * Created on September 14, 2006, 8:59 PM
 */

/**
 *
 * @author  mburo
 */
public class MainWindow extends javax.swing.JFrame 
{
  static String PREFIX = "!";

  CardImages ci;
  
  /** Creates new form MainWindow */
  public MainWindow() {
    initComponents();
    setSize(795, 600);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    cardPanel = new common.CardPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    org.jdesktop.layout.GroupLayout cardPanelLayout = new org.jdesktop.layout.GroupLayout(cardPanel);
    cardPanel.setLayout(cardPanelLayout);
    cardPanelLayout.setHorizontalGroup(
      cardPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(0, 557, Short.MAX_VALUE)
    );
    cardPanelLayout.setVerticalGroup(
      cardPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(0, 429, Short.MAX_VALUE)
    );

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(cardPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(cardPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    pack();
  }// </editor-fold>//GEN-END:initComponents
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private common.CardPanel cardPanel;
  // End of variables declaration//GEN-END:variables
  
  public common.CardPanel getCardPanel() { return cardPanel; }

  public ImagePos cardStr2ImgPos(String s, int x, int y)
  {
    Card card = Card.fromString(s);
    if (card == null) return null;

    return new ImagePos(ci.getCardImage(card.getSuit(), card.getRank()),
                        card.getSuit(), card.getRank(), x, y);
  }

  public void run()
  {
    // read card images

    ci = new CardImages();
    ci.loadCards("/data/cards/E4", 75); // was 75, fixme: make this adjustable
    
    setVisible(true);
    setTitle("skatgui : output");

    int dx = 76, dy = 120;
    int x0 = 10, y0 = 10;
    int x  = x0, y = y0;
    
    ArrayList<ImagePos> images = new ArrayList<ImagePos>();
    boolean ok = true;
    
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    String str = "";
    for (;;) {
    
      if (!ok) {
	System.out.println("error");
      }

      try {

	str = in.readLine();
	if (str == null)
	  break;

	String[] parts = split(str, "[\\s\\.\\|]+");

        for (int i = 0; i < parts.length; ++i) System.out.println(i + ": " + parts[i]);
        
	if (parts.length <= 1)
	  continue;

	if (!parts[0].equals(PREFIX)) {
	  System.out.println(str); // message not for me
	  continue;	  
	}
	
	ok = false;
	
	String first = parts[1].toLowerCase();

	if (first.equals("v")) {
	  // newline
	  y += dy; x = x0;
	  ok = true;

	} else if (first.equals(">")) {
	  // skip x
	  x += dx;
	  ok = true;

	} else if (first.equals("@")) {
	  // reset
	  x = x0; y = y0;
	  images.clear();
	  SwingUtilities.invokeLater(new SetCardsRunnable(images));
	  System.out.println("reset");
	  ok = true;

	} else if (first.equals("dx")) {
	  if (parts.length < 3)
	    continue;
	  dx = Integer.parseInt(parts[2]);
	  ok = true;
	  
	} else if (first.equals("dy")) {
	  if (parts.length < 3)
	    continue;
	  dy = Integer.parseInt(parts[2]);
	  ok = true;
	  
	} else if (first.equals("loc")) {
	  if (parts.length < 4)
	    continue;
	  setLocation(Integer.parseInt(parts[2]), Integer.parseInt(parts[3]));
	  ok = true;
	  
	} else if (first.equals("size")) {
	  if (parts.length < 4)
	    continue;
	  setSize(Integer.parseInt(parts[2]), Integer.parseInt(parts[3]));
	  ok = true;
	  
	} else if (first.equals("xy")) {
	  if (parts.length < 4)
	    continue;
	  x = Integer.parseInt(parts[2]);
	  y = Integer.parseInt(parts[3]);
	  ok = true;

	} else if (first.equals("t0")) {

	  // reset
	  x = x0; y = y0;
	  images.clear();
	  SwingUtilities.invokeLater(new SetCardsRunnable(images));
	  
	  ok = true;

	  Misc.msg("SGF setup string");
	  
	  // sgf setup string

	  for (int h=0; h < 4; h++) {
	    
	    for (int i=0; i < parts.length; i++) {
	      
	      String s = parts[i].toLowerCase();

	      if (s.equals(PREFIX) ||
		  s.equals("t0") || s.equals("t1") || s.equals("t2") || s.equals("ts"))
		continue;

	      ImagePos ip = cardStr2ImgPos(s, x, y);
	      if (ip != null) {
		images.add(ip);
                  x += dx;

	      } else {
		System.out.println("not a card");
		ok = false;
		break;
	      }
	    }

	    if (!ok) break;
	    
	    y += dy; x = x0; // new line

	    if (h < 3) {
	      str = in.readLine(); // read next line
	      if (str == null) {
		ok = false;
		break;
	      }
	      parts = split(str, "[\\s\\.]+");
	    }
	  }

	  SwingUtilities.invokeLater(new SetCardsRunnable(images));
	  continue;
	  
	} else {

	  if (parts.length < 2)
	    continue;

	  // card(s)

	  int i = 1;

	  while (i < parts.length) {

	    String s = parts[i].toUpperCase();
	    i++;

	    ImagePos ip = cardStr2ImgPos(s, x, y);
	    if (ip != null) {
	      images.add(ip);
	      x += dx;
	      ok = true;
	    } else {
	      System.out.println("not a card: " + s);
	      ok = false;
	    }
	  }

	  SwingUtilities.invokeLater(new SetCardsRunnable(images));
	  continue;
	}
      }
      catch (Exception e) { }
    }

    //System.exit(0);
  }

  class SetCardsRunnable implements Runnable
  {
    ArrayList<ImagePos> images;

    SetCardsRunnable(ArrayList<ImagePos> images_) {

      images = new ArrayList<ImagePos>();
      for (ImagePos ip : images_)
	images.add(ip);
    }

    public void run() {
      getCardPanel().images = images;
      // System.out.println(images);
      getCardPanel().repaint();
      repaint();
    }
  }
  
  static public String[] split(String s, String regexp)
  {
    String[] parts = null;

    try { parts = s.split(regexp, 0); }
    catch (PatternSyntaxException e) {
      System.out.println("pattern syntax error: " + regexp);
      System.exit(30);
    }

    return parts;
  }
}
